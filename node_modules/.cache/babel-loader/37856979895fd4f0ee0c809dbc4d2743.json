{"ast":null,"code":"// //This determines if the session is active or not\nimport React from\"react\";import{secondsToDuration,minutesToDuration}from\"../utils/duration/index\";function Session(_ref){var session=_ref.session,focusDuration=_ref.focusDuration,breakDuration=_ref.breakDuration,isTimerRunning=_ref.isTimerRunning;if(session===null){return null;}var currentTimer=session.label===\"Focusing\"?focusDuration:breakDuration;var percent=(currentTimer*60-session.timeRemaining)/(currentTimer*60)*100;function nullSession(){if(session.label===\"Focusing\"){return\"Focusing for \".concat(minutesToDuration(focusDuration),\" minutes\");}else{return\"On Break for \".concat(minutesToDuration(breakDuration),\" minutes\");}}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"h2\",{\"data-testid\":\"session-title\"},nullSession()/* ${session.label} for 25:00 minutes  */),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\",\"data-testid\":\"session-sub-title\"},secondsToDuration(session.timeRemaining),\" remaining\"),/*#__PURE__*/React.createElement(\"h2\",{style:{display:\"\".concat(isTimerRunning?\"none\":\"block\")}},\"PAUSED\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\",style:{height:\"20px\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",\"aria-valuenow\":percent// TODO: Increase aria-valuenow as elapsed time increases\n,style:{width:\"\".concat(percent,\"%\")}// TODO: Increase width % as elapsed time increases\n})))));}export default Session;","map":{"version":3,"sources":["/Users/seth/Desktop/thinkful-work/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Session.js"],"names":["React","secondsToDuration","minutesToDuration","Session","session","focusDuration","breakDuration","isTimerRunning","currentTimer","label","percent","timeRemaining","nullSession","display","height","width"],"mappings":"AAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,iBAAR,CAA0BC,iBAA1B,KAAkD,yBAAlD,CACA,QAASC,CAAAA,OAAT,MAAyE,IAAvDC,CAAAA,OAAuD,MAAvDA,OAAuD,CAA9CC,aAA8C,MAA9CA,aAA8C,CAA/BC,aAA+B,MAA/BA,aAA+B,CAAjBC,cAAiB,MAAjBA,cAAiB,CACtE,GAAGH,OAAO,GAAK,IAAf,CAAoB,CACf,MAAO,KAAP,CACH,CACA,GAAMI,CAAAA,YAAY,CAAIJ,OAAO,CAACK,KAAR,GAAkB,UAAlB,CAA+BJ,aAA/B,CAA+CC,aAArE,CACA,GAAMI,CAAAA,OAAO,CAAI,CAACF,YAAY,CAAG,EAAf,CAAoBJ,OAAO,CAACO,aAA7B,GAA+CH,YAAY,CAAG,EAA9D,CAAD,CAAsE,GAAtF,CAEF,QAASI,CAAAA,WAAT,EAAuB,CACrB,GAAGR,OAAO,CAACK,KAAR,GAAkB,UAArB,CAAiC,CAC/B,6BAAuBP,iBAAiB,CAACG,aAAD,CAAxC,aACD,CAFD,IAEO,CACL,6BAAuBH,iBAAiB,CAACI,aAAD,CAAxC,aACD,CACF,CAEA,mBACI,4CAEA,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eAEE,0BAAI,cAAY,eAAhB,EACGM,WAAW,EAAE,yCADhB,CAFF,cAME,yBAAG,SAAS,CAAC,MAAb,CAAoB,cAAY,mBAAhC,EACGX,iBAAiB,CAACG,OAAO,CAACO,aAAT,CADpB,cANF,cASE,0BAAI,KAAK,CAAE,CAACE,OAAO,WAAKN,cAAc,CAAG,MAAH,CAAY,OAA/B,CAAR,CAAX,WATF,CADF,CAFA,cAeA,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,UAAf,CAA0B,KAAK,CAAE,CAAEO,MAAM,CAAE,MAAV,CAAjC,eACE,2BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,aAFP,CAGE,gBAAc,GAHhB,CAIE,gBAAc,KAJhB,CAKE,gBAAeJ,OAAS;AAL1B,CAMC,KAAK,CAAE,CAACK,KAAK,WAAKL,OAAL,KAAN,CAAwB;AANhC,EADF,CADF,CADF,CAfA,CADJ,CAgCH,CAED,cAAeP,CAAAA,OAAf","sourcesContent":["// //This determines if the session is active or not\nimport React from \"react\"\nimport {secondsToDuration,minutesToDuration} from \"../utils/duration/index\";\nfunction Session({session, focusDuration, breakDuration,isTimerRunning,}){\n   if(session === null){\n        return null\n    }\n     const currentTimer = (session.label === \"Focusing\" ? focusDuration : breakDuration)\n     const percent = ((currentTimer * 60 - session.timeRemaining) / (currentTimer * 60)) * 100\n\n   function nullSession() {\n     if(session.label === \"Focusing\") {\n       return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n     } else {\n       return `On Break for ${minutesToDuration(breakDuration)} minutes`\n     } \n   }\n\n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {nullSession()/* ${session.label} for 25:00 minutes  */}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <h2 style={{display: `${isTimerRunning ? \"none\" : \"block\" }`}}>PAUSED</h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n               style={{width: `${percent}%`}} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Session;"]},"metadata":{},"sourceType":"module"}