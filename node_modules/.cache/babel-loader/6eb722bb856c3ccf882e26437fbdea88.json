{"ast":null,"code":"var _jsxFileName = \"/Users/seth/Desktop/thinkful-work/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Session.js\";\n// //This determines if the session is active or not\nimport React from \"react\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration/index\";\n\nfunction Session({\n  session,\n  focusDuration,\n  breakDuration,\n  isTimerRunning\n}) {\n  if (session === null) {\n    return null;\n  }\n\n  const currentTimer = session.label === \"Focusing\" ? focusDuration : breakDuration;\n  const percent = (currentTimer * 60 - session.timeRemaining) / (currentTimer * 60) * 100;\n\n  function nullSession() {\n    if (session.label === \"Focusing\") {\n      return `Focusing for ${minutesToDuration(focusDuration)} minutes`;\n    } else {\n      return `On Break for ${minutesToDuration(breakDuration)} minutes`;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, nullSession()\n  /* ${session.label} for 25:00 minutes  */\n  ), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, secondsToDuration(session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      display: `${isTimerRunning ? \"none\" : \"block\"}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percent // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${percent}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default Session;","map":{"version":3,"sources":["/Users/seth/Desktop/thinkful-work/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Session.js"],"names":["React","secondsToDuration","minutesToDuration","Session","session","focusDuration","breakDuration","isTimerRunning","currentTimer","label","percent","timeRemaining","nullSession","display","height","width"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,EAA0BC,iBAA1B,QAAkD,yBAAlD;;AACA,SAASC,OAAT,CAAiB;AAACC,EAAAA,OAAD;AAAUC,EAAAA,aAAV;AAAyBC,EAAAA,aAAzB;AAAuCC,EAAAA;AAAvC,CAAjB,EAAyE;AACtE,MAAGH,OAAO,KAAK,IAAf,EAAoB;AACf,WAAO,IAAP;AACH;;AACA,QAAMI,YAAY,GAAIJ,OAAO,CAACK,KAAR,KAAkB,UAAlB,GAA+BJ,aAA/B,GAA+CC,aAArE;AACA,QAAMI,OAAO,GAAI,CAACF,YAAY,GAAG,EAAf,GAAoBJ,OAAO,CAACO,aAA7B,KAA+CH,YAAY,GAAG,EAA9D,CAAD,GAAsE,GAAtF;;AAEF,WAASI,WAAT,GAAuB;AACrB,QAAGR,OAAO,CAACK,KAAR,KAAkB,UAArB,EAAiC;AAC/B,aAAQ,gBAAeP,iBAAiB,CAACG,aAAD,CAAgB,UAAxD;AACD,KAFD,MAEO;AACL,aAAQ,gBAAeH,iBAAiB,CAACI,aAAD,CAAgB,UAAxD;AACD;AACF;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,WAAW;AAAE;AADhB,GAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,iBAAiB,CAACG,OAAO,CAACO,aAAT,CADpB,eANF,eASE;AAAI,IAAA,KAAK,EAAE;AAACE,MAAAA,OAAO,EAAG,GAAEN,cAAc,GAAG,MAAH,GAAY,OAAS;AAAhD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,CADF,CAFA,eAeA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeJ,OALjB,CAK0B;AAL1B;AAMC,IAAA,KAAK,EAAE;AAACK,MAAAA,KAAK,EAAG,GAAEL,OAAQ;AAAnB,KANR,CAMgC;AANhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAfA,CADJ;AAgCH;;AAED,eAAeP,OAAf","sourcesContent":["// //This determines if the session is active or not\nimport React from \"react\"\nimport {secondsToDuration,minutesToDuration} from \"../utils/duration/index\";\nfunction Session({session, focusDuration, breakDuration,isTimerRunning,}){\n   if(session === null){\n        return null\n    }\n     const currentTimer = (session.label === \"Focusing\" ? focusDuration : breakDuration)\n     const percent = ((currentTimer * 60 - session.timeRemaining) / (currentTimer * 60)) * 100\n\n   function nullSession() {\n     if(session.label === \"Focusing\") {\n       return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n     } else {\n       return `On Break for ${minutesToDuration(breakDuration)} minutes`\n     } \n   }\n\n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {nullSession()/* ${session.label} for 25:00 minutes  */}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <h2 style={{display: `${isTimerRunning ? \"none\" : \"block\" }`}}>PAUSED</h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n               style={{width: `${percent}%`}} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Session;"]},"metadata":{},"sourceType":"module"}