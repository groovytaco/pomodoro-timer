{"version":3,"sources":["pomodoro/Focus.js","pomodoro/Break.js","utils/duration/index.js","pomodoro/Session.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["Focus","num","focusDuration","setFocusDuration","disableButton","className","data-testid","type","onClick","disabled","Break","breakDuration","setBreakDuration","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Session","session","isTimerRunning","currentTimer","label","percent","timeRemaining","givenSeconds","seconds","round","secondsToDuration","style","display","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","classNameToBoolean","useState","setIsTimerRunning","setSession","stopButton","setStopButton","setDisableButton","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb4aaa27.chunk.js","sourcesContent":["import React from \"react\";\n//import { minutesToDuration } from \"../utils/duration/index\"\n//Increases and Decreases Focus Time\nfunction Focus({focusDuration, setFocusDuration, disableButton}){\n  \n    // function handleIncreaseFocus(){\n    //     setFocus(Math.max(focus-5),5);\n    //   }\n    \n    //   function handleDecreaseFocus(){\n    //    setFocus(Math.min(focus +5),60)\n    //   }\n\n    function helper(num){\n      if(num < 10){\n        return  '0'\n      }\n      return ''\n    }\n\n      function handleIncreaseFocus(){\n       if(focusDuration >= 60) return\n        const newValue = focusDuration+ 5\n       setFocusDuration(newValue)\n     }\n    \n      function handleDecreaseFocus(){\n        if(focusDuration <= 5) return \n        const newValue = focusDuration - 5\n        setFocusDuration(newValue)\n      }\n      return (\n        <div className=\"input-group input-group-lg mb-2\">\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\n          {/* TODO: Update this text to display the current focus session duration */}\n          {`Focus Duration: ${helper(focusDuration)}${focusDuration}:00`}\n        </span>\n        <div className=\"input-group-append\">\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"decrease-focus\"\n            onClick={handleDecreaseFocus}\n            disabled={disableButton}\n          >\n            <span className=\"oi oi-minus\" />\n          </button>\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"increase-focus\"\n            onClick={handleIncreaseFocus}\n            disabled={disableButton}\n          >\n            <span className=\"oi oi-plus\" />\n          </button>\n        </div>\n      </div>\n      );\n}\n\nexport default Focus;","import React from \"react\";\n\nfunction Break({ breakDuration, setBreakDuration, disableButton }) {\n  function helper(num) {\n    if (num < 10) {\n      return \"0\";\n    }\n    return \"\";\n  }\n\n  function handleIncreaseBreak() {\n    if (breakDuration >= 15) return;\n    const newValue = breakDuration + 1;\n    setBreakDuration(newValue);\n  }\n\n  function handleDecreaseBreak() {\n    if (breakDuration <= 1) return;\n    const newValue = breakDuration - 1;\n    setBreakDuration(newValue);\n  }\n\n  return (\n    <div className=\"float-right\">\n      <div className=\"input-group input-group-lg mb-2\">\n        <span className=\"input-group-text\" data-testid=\"duration-break\">\n          {`Break Duration: ${helper(breakDuration)}${breakDuration}:00`}\n        </span>\n        <div className=\"input-group-append\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"decrease-break\"\n            onClick={() => {\n              handleDecreaseBreak();\n            }}\n            disabled={disableButton}\n          >\n            <span className=\"oi oi-minus\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"increase-break\"\n            onClick={() => {\n              handleIncreaseBreak();\n            }}\n            disabled={disableButton}\n          >\n            \n            <span className=\"oi oi-plus\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Break;","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","// //This determines if the session is active or not\nimport React from \"react\"\nimport {secondsToDuration,minutesToDuration} from \"../utils/duration/index\";\nfunction Session({session, focusDuration, breakDuration,isTimerRunning,}){\n   if(session === null){\n        return null\n    }\n     const currentTimer = (session.label === \"Focusing\" ? focusDuration : breakDuration)\n     const percent = ((currentTimer * 60 - session.timeRemaining) / (currentTimer * 60)) * 100\n\n   function nullSession() {\n     if(session.label === \"Focusing\") {\n       return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n     } else {\n       return `On Break for ${minutesToDuration(breakDuration)} minutes`\n     } \n   }\n\n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {nullSession()/* ${session.label} for 25:00 minutes  */}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <h2 style={{display: `${isTimerRunning ? \"none\" : \"block\" }`}}>PAUSED</h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n               style={{width: `${percent}%`}} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Session;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\"\nimport Session from \"./Session\"\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  // Turn off and on the stop button\n  const [stopButton, setStopButton] = useState(true)\n  const [disableButton, setDisableButton] = useState(false)\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      //PPPPPPPPPPPPPPPPPPP\n      setStopButton(false);\n      setDisableButton(true);\n\n\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function handleStop(){\n    setIsTimerRunning(false);\n    setStopButton(true);\n    setSession(null);\n    setDisableButton(false);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          {/*PPPPPPPPPPPPPPP*/}\n          <Focus\n           focusDuration ={focusDuration}\n           setFocusDuration={setFocusDuration}\n           disableButton={disableButton} \n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            {/*PPPPPPPPPPPPPPP*/}\n            <Break\n            breakDuration ={breakDuration}\n            setBreakDuration={setBreakDuration}\n            disableButton={disableButton}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={stopButton}\n              onClick={handleStop}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      {/*PPPPPPPPPPPPPPPPPPP*/}\n       <Session\n       session={session}\n       focusDuration={focusDuration}\n       breakDuration={breakDuration}\n       isTimerRunning={isTimerRunning}\n       />\n    </div>\n  );\n}\n\nexport default Pomodoro;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}